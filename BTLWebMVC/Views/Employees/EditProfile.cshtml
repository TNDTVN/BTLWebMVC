@model BTLWebMVC.Models.Employee

@{
    ViewBag.Title = "Chỉnh sửa thông tin cá nhân";
    Layout = "~/Views/Shared/Layoutmanager.cshtml";
}

<style>
    .content-wrapper {
        padding: 20px;
        background: #f4f6f9;
        min-height: calc(100vh - 56px);
    }

    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-radius: 15px 15px 0 0;
        padding: 1.5rem;
    }

    .card-title {
        margin: 0;
        font-weight: 600;
        font-size: 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    .form-control {
        border-radius: 8px;
        transition: border-color 0.3s, box-shadow 0.3s;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .form-control[readonly] {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #007bff;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s;
    }

    .btn-primary:hover {
        background: #0056b3;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .btn-secondary {
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s;
    }

    .btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .profile-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
    }

    .profile-image-container {
        position: relative;
        width: 180px;
        height: 180px;
        margin-bottom: 1.5rem;
    }

    .profile-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
        border: 4px solid #fff;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
    }

    .profile-image:hover {
        transform: scale(1.05);
    }

    .image-preview {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
        border: 4px solid #007bff;
        display: none;
    }

    .upload-area {
        width: 100%;
        text-align: center;
    }

    .upload-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background-color: #fff;
        border: 2px dashed #ced4da;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
        transition: all 0.3s;
        color: #495057;
        font-weight: 500;
        width: 100%;
        max-width: 300px;
    }

    .upload-btn:hover {
        background-color: #f1f3f5;
        border-color: #adb5bd;
    }

    .upload-btn i {
        margin-right: 8px;
        color: #007bff;
        font-size: 1.2rem;
    }

    .file-input {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    .file-info {
        margin-top: 10px;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
    }

    .form-col {
        flex: 0 0 50%;
        max-width: 50%;
        padding-right: 15px;
        padding-left: 15px;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 0;
    }

    .invalid-feedback {
        font-size: 0.85rem;
        display: none;
    }

    .form-control.is-invalid ~ .invalid-feedback {
        display: block;
    }

    label {
        font-weight: 500;
        color: #343a40;
        margin-bottom: 0.5rem;
        display: block;
    }

    .action-buttons {
        display: flex;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    @@media (max-width: 992px) {
        .form-col {
            flex: 0 0 100%;
            max-width: 100%;
        }

        .profile-section {
            margin-bottom: 1.5rem;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn {
            width: 100%;
            margin-bottom: 0.75rem;
        }

        .btn-secondary {
            margin-left: 0 !important;
        }
    }
</style>

<div class="content-wrapper">
    <div class="container">
        <div class="card mt-4">
            <div class="card-header">
                <h4 class="card-title"><i class="fas fa-user-edit mr-2"></i>Chỉnh sửa thông tin cá nhân</h4>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("EditProfile", "Employees", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.EmployeeID)
                    @Html.HiddenFor(model => model.AccountID)
                    @Html.HiddenFor(model => model.HireDate)

                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                    <!-- Phần ảnh đại diện -->
                    <div class="profile-section">
                        <div class="profile-image-container">
                            <img src="~/Content/accountImages/@ViewBag.ProfileImage" class="profile-image" id="currentImage" alt="Ảnh đại diện" />
                            <img id="imagePreview" class="image-preview" alt="Xem trước ảnh" />
                        </div>

                        <div class="upload-area">
                            <label class="upload-btn" for="profileImageInput">
                                <i class="fas fa-camera"></i>
                                <span id="uploadText">Thay đổi ảnh đại diện</span>
                            </label>
                            <input type="file" name="ProfileImage" id="profileImageInput" accept=".jpg,.jpeg,.png" class="file-input" />
                            <div class="file-info" id="fileInfo">Kích thước tối đa: 5MB - Định dạng: JPG, PNG</div>
                            @Html.ValidationMessage("ProfileImage", "", new { @class = "invalid-feedback d-block text-center" })
                        </div>
                    </div>

                    <!-- Phần thông tin cá nhân - Bố cục 2 cột -->
                    <div class="form-row">
                        <!-- Cột 1 -->
                        <div class="form-col">
                            <div class="form-group">
                                <label for="FirstName">Họ</label>
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập họ", required = "required" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="BirthDate">Ngày sinh</label>
                                @Html.TextBoxFor(model => model.BirthDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="Address">Địa chỉ</label>
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập địa chỉ" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="PostalCode">Mã bưu điện</label>
                                @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập mã bưu điện" } })
                                @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="Phone">Số điện thoại</label>
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập số điện thoại" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <!-- Cột 2 -->
                        <div class="form-col">
                            <div class="form-group">
                                <label for="LastName">Tên</label>
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập tên", required = "required" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="HireDate">Ngày thuê</label>
                                @Html.TextBoxFor(model => model.HireDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.HireDate, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="City">Thành phố</label>
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập thành phố" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="Country">Quốc gia</label>
                                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập quốc gia" } })
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="Email">Email</label>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập email" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>
                    </div>

                    <!-- Nút hành động -->
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary"><i class="fas fa-save mr-2"></i>Lưu thay đổi</button>
                        @Html.ActionLink("Hủy bỏ", "Index", "HomeManager", null, new { @class = "btn btn-secondary ml-3" })
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Xác thực client-side với Bootstrap
            $("form").validate({
                rules: {
                    ProfileImage: {
                        accept: "image/jpeg,image/png",
                        filesize: 5242880 // 5MB
                    },
                    FirstName: {
                        required: true
                    },
                    LastName: {
                        required: true
                    },
                    BirthDate: {
                        required: true
                    }
                },
                messages: {
                    ProfileImage: {
                        accept: "Vui lòng chọn tệp .jpg hoặc .png",
                        filesize: "Ảnh không được vượt quá 5MB"
                    },
                    FirstName: {
                        required: "Họ là bắt buộc"
                    },
                    LastName: {
                        required: "Tên là bắt buộc"
                    },
                    BirthDate: {
                        required: "Ngày sinh là bắt buộc"
                    }
                },
                errorPlacement: function (error, element) {
                    if (element.attr("name") === "ProfileImage") {
                        error.appendTo(element.closest(".upload-area"));
                    } else {
                        error.appendTo(element.closest(".form-group"));
                    }
                    error.addClass("invalid-feedback");
                    element.addClass("is-invalid");
                },
                success: function (label, element) {
                    $(element).removeClass("is-invalid");
                }
            });

            // Thêm rule kiểm tra kích thước file
            $.validator.addMethod('filesize', function (value, element, param) {
                return this.optional(element) || (element.files[0].size <= param);
            });

            // Xử lý upload ảnh
            $("#profileImageInput").change(function () {
                const file = this.files[0];
                const uploadText = $("#uploadText");
                const fileInfo = $("#fileInfo");

                if (file) {
                    // Hiển thị tên file
                    uploadText.text(file.name.length > 20 ? file.name.substring(0, 20) + '...' : file.name);
                    fileInfo.text(`Kích thước: ${formatFileSize(file.size)} - Loại: ${file.type}`);

                    // Xem trước ảnh
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $("#imagePreview").attr("src", e.target.result).show();
                        $("#currentImage").hide();
                    };
                    reader.readAsDataURL(file);
                } else {
                    uploadText.text("Thay đổi ảnh đại diện");
                    fileInfo.text("Kích thước tối đa: 5MB - Định dạng: JPG, PNG");
                    $("#imagePreview").hide();
                    $("#currentImage").show();
                }
            });

            // Định dạng kích thước file
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
        });
    </script>
}