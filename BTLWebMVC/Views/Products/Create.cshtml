@model BTLWebMVC.Models.Product

@{
    ViewBag.Title = "Tạo sản phẩm";
    Layout = "~/Views/Shared/Layoutmanager.cshtml";
}

<style>
    .content-wrapper {
        padding: 20px;
        background: #f4f6f9;
        min-height: calc(100vh - 56px);
    }

    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-radius: 15px 15px 0 0;
        padding: 1.5rem;
    }

    .card-title {
        margin: 0;
        font-weight: 600;
        font-size: 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    .form-control, .custom-select {
        border-radius: 8px;
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        .form-control:focus, .custom-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .form-control.is-invalid, .custom-select.is-invalid {
            border-color: #dc3545;
        }

    .invalid-feedback {
        font-size: 0.85rem;
        display: none;
    }

    .form-control.is-invalid ~ .invalid-feedback,
    .custom-select.is-invalid ~ .invalid-feedback {
        display: block;
    }

    .btn-primary {
        background: #007bff;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            background: #0056b3;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

    .btn-outline-secondary {
        border-radius: 8px;
        padding: 0.75rem 2rem;
        transition: all 0.3s;
    }

        .btn-outline-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin: 0 auto 20px auto;
        min-height: 100px;
        border: 1px solid #dee2e6;
        padding: 10px;
        background: #fff;
        position: relative;
    }

    .product-image-preview {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 4px !important;
        border: 2px solid #dee2e6;
        background: #fff;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        display: block;
        position: relative;
    }

        .product-image-preview:hover {
            transform: scale(1.02);
            border-color: #007bff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .image-upload {
        margin: 20px 0;
        text-align: center;
        position: relative;
        width: 100%;
    }

    .upload-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #fff;
        border: 2px dashed #ced4da;
        border-radius: 10px !important;
        padding: 12px 24px;
        cursor: pointer;
        transition: all 0.3s;
        color: #343a40;
        font-weight: 500;
        font-size: 1rem;
        width: auto;
        margin: 0 auto;
        box-sizing: border-box;
        position: relative !important;
        top: 0 !important;
        left: 0 !important;
    }

        .upload-btn:hover {
            background: linear-gradient(135deg, #e7f0fd, #f1f3f5);
            border-color: #007bff;
            transform: scale(1.02);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .upload-btn i {
            margin-right: 10px;
            color: #007bff;
            font-size: 1.4rem;
        }

    .file-input {
        display: none;
    }

    .file-info {
        margin-top: 10px;
        font-size: 0.85rem;
        color: #6c757d;
        text-align: center;
    }

    .form-text {
        font-size: 0.85rem;
        color: #6c757d;
    }

    label {
        font-weight: 500;
        color: #343a40;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    .image-item {
        position: relative;
        display: inline-block;
    }

    .delete-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 20px;
        height: 20px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        font-size: 12px;
        line-height: 20px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .delete-btn:hover {
            background: #c82333;
        }
</style>

<div class="content-wrapper">
    <div class="container">
        <div class="card mt-4">
            <div class="card-header">
                <h4 class="card-title"><i class="fas fa-box-open mr-2"></i>Tạo sản phẩm mới</h4>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                    <div class="row">
                        <div class="col-md-6 form-col">
                            <div class="form-group">
                                <label for="ProductName">Tên sản phẩm</label>
                                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", placeholder = "Nhập tên sản phẩm", required = "required" } })
                                <small class="form-text">Tên sản phẩm nên ngắn gọn và rõ ràng.</small>
                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="CategoryID">Danh mục sản phẩm</label>
                                @Html.DropDownList("CategoryID", null, "Chọn danh mục", new { @class = "custom-select", required = "required" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="SupplierID">Nhà cung cấp</label>
                                @Html.DropDownList("SupplierID", null, "Chọn nhà cung cấp", new { @class = "custom-select", required = "required" })
                                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="QuantityPerUnit">Khối lượng</label>
                                @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control", type = "text", placeholder = "Ví dụ: 1 kg", required = "required" } })
                                <small class="form-text">Nhập khối lượng sản phẩm (ví dụ: 1 kg).</small>
                                @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="UnitPrice">Giá (VND)</label>
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", type = "number", min = "0", step = "1000", value = "0", required = "required" } })
                                <small class="form-text">Nhập giá sản phẩm, tối thiểu 0 VND.</small>
                                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="UnitsInStock">Số lượng tồn kho</label>
                                @Html.EditorFor(model => model.UnitsInStock, new { htmlAttributes = new { @class = "form-control", type = "number", min = "0", step = "1", value = "0", placeholder = "Nhập vào số luộng tồn kho", required = "required" } })
                                <small class="form-text">Nhập giá sản phẩm, tối thiểu 0 VND.</small>
                                @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "invalid-feedback" })
                            </div>

                            <div class="form-group">
                                <label for="ProductDescription">Mô tả</label>
                                @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control", rows = "4", placeholder = "Nhập mô tả sản phẩm" })
                                <small class="form-text">Mô tả chi tiết về sản phẩm (tùy chọn).</small>
                                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <div class="col-md-6 form-col">
                            <fieldset>
                                <legend class="mb-3">Hình ảnh sản phẩm</legend>
                                <div class="image-preview-container" id="imagePreviewContainer">
                                    <img src="@Url.Content("~/Content/Images/default-product.jpg")" alt="Ảnh mặc định" class="product-image-preview" id="defaultImage" onerror="this.src='/Content/Images/fallback.jpg'" />
                                </div>
                                <div class="image-upload">
                                    <label class="upload-btn" for="ImageFiles">
                                        <i class="fas fa-camera"></i>
                                        <span>Chọn hình ảnh sản phẩm</span>
                                    </label>
                                    <input type="file" class="file-input" id="ImageFiles" name="ImageFiles" accept=".jpg,.jpeg,.png" multiple />
                                    <br />
                                    <small class="file-info">Kích thước tối đa: 5MB - Định dạng: JPG, PNG - Chọn nhiều ảnh</small>
                                    @Html.ValidationMessage("ImageFiles", "", new { @class = "invalid-feedback d-block text-center" })
                                </div>
                            </fieldset>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-12 text-center">
                            <button type="submit" class="btn btn-primary"><i class="fas fa-save mr-2"></i>Tạo sản phẩm</button>
                            @Html.ActionLink("Trở lại", "Index", null, new { @class = "btn btn-outline-secondary ml-2" })
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            console.log("Create page loaded");
            let validFiles = []; // Mảng lưu các tệp hợp lệ

            $("#ImageFiles").on("change", function () {
                console.log("ImageFiles change event triggered");
                const files = this.files;
                const previewContainer = $("#imagePreviewContainer");
                const defaultImage = $("#defaultImage");

                // Xóa ảnh hiện tại
                if (defaultImage.length > 0) {
                    defaultImage.remove();
                }
                previewContainer.empty();
                validFiles = []; // Reset danh sách tệp hợp lệ

                if (files && files.length > 0) {
                    console.log("Number of files selected:", files.length);

                    Array.from(files).forEach((file, index) => {
                        console.log(`Processing file ${index}:`, file.name, file.type, file.size);
                        if (!file.type.match("image/(jpeg|png)")) {
                            console.error("Invalid file type:", file.type);
                            alert(`Tệp ${file.name} không hợp lệ. Chỉ chấp nhận .jpg hoặc .png`);
                            return;
                        }
                        if (file.size > 5242880) {
                            console.error("File too large:", file.size);
                            alert(`Tệp ${file.name} vượt quá 5MB`);
                            return;
                        }

                        // Thêm vào danh sách tệp hợp lệ
                        validFiles.push(file);

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            console.log("FileReader onload, data URL length:", e.target.result.length);
                            const imageItem = $("<div>", { class: "image-item" });
                            const img = $("<img>", {
                                src: e.target.result,
                                alt: "Xem trước ảnh",
                                class: "product-image-preview"
                            });
                            const deleteBtn = $("<button>", {
                                class: "delete-btn",
                                type: "button",
                                text: "x"
                            }).on("click", function () {
                                $(this).parent().remove();
                                console.log("Uploaded image deleted from preview");
                                // Xóa tệp khỏi validFiles
                                validFiles = validFiles.filter(f => f !== file);
                                // Khôi phục ảnh mặc định nếu không còn ảnh
                                if (previewContainer.find(".image-item").length === 0) {
                                    previewContainer.append(
                                        $("<img>", {
                                            src: "@Url.Content("~/Content/Images/default-product.jpg")",
                                            alt: "Ảnh mặc định",
                                            class: "product-image-preview",
                                            id: "defaultImage",
                                            onerror: "this.src='/Content/Images/fallback.jpg'"
                                        })
                                    );
                                }
                            });
                            imageItem.append(img).append(deleteBtn);
                            previewContainer.append(imageItem);
                            console.log("Uploaded image appended to previewContainer");
                        };
                        reader.onerror = function () {
                            console.error("Error reading file:", file.name);
                            alert(`Lỗi khi đọc tệp ${file.name}`);
                        };
                        reader.readAsDataURL(file);
                    });

                    // Cập nhật input file để chỉ chứa các tệp hợp lệ
                    const dataTransfer = new DataTransfer();
                    validFiles.forEach(file => dataTransfer.items.add(file));
                    this.files = dataTransfer.files;
                }
            });

            // Ngăn gửi form nếu không có tệp hợp lệ
            $("form").on("submit", function (e) {
                const files = $("#ImageFiles")[0].files;
                if (files.length > 0) {
                    for (let file of files) {
                        if (!file.type.match("image/(jpeg|png)")) {
                            alert(`Tệp ${file.name} không hợp lệ. Chỉ chấp nhận .jpg hoặc .png`);
                            e.preventDefault();
                            return false;
                        }
                        if (file.size > 5242880) {
                            alert(`Tệp ${file.name} vượt quá 5MB`);
                            e.preventDefault();
                            return false;
                        }
                    }
                }
            });
        });
    </script>
}