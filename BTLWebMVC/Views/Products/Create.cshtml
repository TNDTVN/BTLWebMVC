@model BTLWebMVC.Models.Product

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/Layoutmanager.cshtml";
}
<div class="content-wrapper">
    <div class="container mt-4">
        <h2 class="mb-4">Tạo sản phẩm</h2>
        <hr />

        @using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

            <div class="row">

                <div class="col-md-6">
                    <fieldset>


                        <div class="form-group">
                            <label for="ProductID">Tên sản phẩm</label>
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", id = "ProductID" } })
                            <small id="tf1Help" class="form-text text-muted">Nhập tên sản phẩm của bạn.</small>
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label for="CategoryID">Danh mục sản phẩm</label>
                            <div>
                                @Html.DropDownList("CategoryID", null, "Loại sản phẩm", new { @class = "custom-select", id = "CategoryID", required = "" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="mb-3 form-group">
                            <label for="SuppilerID">Nhà cung cấp</label>
                            @Html.DropDownList("SupplierID", null, "Chọn nhà cung cấp", new { @class = "custom-select", required = "" })
                            @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "invalid-feedback" })
                        </div>


                        <!-- Khối lượng (Number input) -->
                        <div class="form-group">
                            <label for="QuantityPerUnit">Khối lượng</label>
                            <div class="custom-number">
                                @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control", id = "QuantityPerUnit", type = "number", min = "0", max = "1000", step = "1", value = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "text-danger" })
                        </div>

                        <!-- Giá (Number input) -->
                        <div class="form-group">
                            <label for="UnitPrice">Giá</label>
                            <div class="custom-number">
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", id = "UnitPrice", type = "number", min = "0", step = "0.01", value = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>


                        <div class="form-group">
                            <label for="Description">Mô tả</label>
                            <textarea class="form-control" id="Description" name="ProductDescription" rows="3">@Model?.ProductDescription</textarea>
                            @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
                        </div>
                    </fieldset>
                </div>


                <!-- Tải lên hình ảnh -->
                <div class="col-md-6">
                    <fieldset>
                        <legend>Hình ảnh sản phẩm</legend>
                        <div class="text-center mb-3">
                            <img id="previewImage" src="@Url.Content("~/Content/Images/default-product.jpg")" alt="Xem trước ảnh" class="img-fluid rounded shadow-sm" style="max-height: 300px; object-fit: contain; transition: all 0.3s ease;" onerror="this.src='https://via.placeholder.com/300x300?text=Default+Image';" />
                            <p class="mt-2 mb-0 text-muted small">Ảnh sản phẩm sẽ hiển thị ở đây</p>
                        </div>
                        <div class="input-group has-clearable">
                            <label class="input-group-prepend" for="ImageFile">
                                <span class="input-group-text"><i class="fa fa-upload"></i></span>
                            </label>
                            <input type="file" class="form-control" id="ImageFile" name="ImageFile" accept="image/*" onchange="previewImage(event)">
                            <button type="button" class="close" aria-label="Close">
                                <span aria-hidden="true"><i class="fa fa-times-circle"></i></span>
                            </button>
                        </div>
                    </fieldset>
                </div>
            </div>
            <div class="row mt-4">
                <div class="col-12 text-center">
                    <button type="submit" class="btn btn-primary px-5 fw-semibold shadow">Tạo sản phẩm</button>
                    @Html.ActionLink("Trở lại", "Index", null, new { @class = "btn btn-outline-secondary px-4 ms-2 fw-semibold" })
                </div>
            </div>}
    </div>
</div>

<script>
    function previewImage(event) {
        var output = document.getElementById('previewImage');
        if (!output) {
            console.error("Không tìm thấy phần tử previewImage.");
            return;
        }
        if (event.target.files && event.target.files[0]) {
            var reader = new FileReader();
            reader.onload = function () {
                output.src = reader.result;
                console.log("Đã cập nhật hình ảnh xem trước:", reader.result);
            };
            reader.onerror = function () {
                console.error("Lỗi khi đọc tệp hình ảnh.");
            };
            reader.readAsDataURL(event.target.files[0]);
        } else {
            console.log("Không có tệp nào được chọn, giữ nguyên hình ảnh mặc định.");
        }
    }

    document.querySelectorAll('.has-clearable .close').forEach(button => {
        button.addEventListener('click', () => {
            const input = button.parentElement.querySelector('input, textarea');
            if (input) {
                input.value = '';
                var output = document.getElementById('previewImage');
                if (output) {
                    output.src = "@Url.Content("~/Content/Images/default-product.jpg")";
                }
            }
        });
    });
</script>