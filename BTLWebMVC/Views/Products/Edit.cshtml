@model BTLWebMVC.Models.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/Layoutmanager.cshtml";
}

<style>
    .content-wrapper {
        padding: 20px;
        background: #f4f6f9;
    }

    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-radius: 15px 15px 0 0;
        padding: 1.5rem;
    }

    .form-control, .custom-select {
        border-radius: 5px;
        transition: border-color 0.3s;
    }

        .form-control:focus, .custom-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .btn-primary {
        background: #007bff;
        border: none;
        border-radius: 8px;
        transition: transform 0.3s;
    }

        .btn-primary:hover {
            background: #0056b3;
            transform: scale(1.05);
        }

    .btn-secondary {
        border-radius: 8px;
        transition: transform 0.3s;
    }

        .btn-secondary:hover {
            transform: scale(1.05);
        }

    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
        min-height: 100px;
        border: 1px solid #dee2e6;
        padding: 10px;
        background: #fff;
        position: relative;
    }

    .product-image-preview {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 4px !important;
        border: 2px solid #dee2e6;
        transition: all 0.3s;
        display: block;
        position: relative;
    }

        .product-image-preview:hover {
            border-color: #007bff;
            transform: scale(1.02);
        }

    .image-upload {
        margin: 20px 0;
        text-align: center;
        position: relative;
        width: 100%;
    }

    .upload-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #fff;
        border: 2px dashed #ced4da;
        border-radius: 10px !important;
        padding: 12px 24px;
        cursor: pointer;
        transition: all 0.3s;
        color: #343a40;
        font-weight: 500;
        font-size: 1rem;
        width: auto;
        margin: 0 auto;
        box-sizing: border-box;
        position: relative !important;
        top: 0 !important;
        left: 0 !important;
    }

        .upload-btn:hover {
            border-color: #007bff;
            transform: scale(1.02);
        }

        .upload-btn i {
            margin-right: 10px;
            color: #007bff;
        }

    .file-input {
        display: none;
    }

    .image-item {
        position: relative;
        display: inline-block;
    }

    .delete-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 20px;
        height: 20px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        font-size: 12px;
        line-height: 20px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .delete-btn:hover {
            background: #c82333;
        }
</style>

<div class="content-wrapper">
    <div class="container py-4">
        <div class="card shadow-sm">
            <div class="card-header">
                <h2 class="mb-0">Sửa sản phẩm</h2>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })
                    @Html.HiddenFor(model => model.ProductID)

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="ProductName">Tên sản phẩm</label>
                                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", id = "ProductName" } })
                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-3">
                                <label for="CategoryID">Danh mục sản phẩm</label>
                                @Html.DropDownList("CategoryID", null, "Chọn loại sản phẩm", new { @class = "custom-select", id = "CategoryID" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-3">
                                <label for="SupplierID">Nhà cung cấp</label>
                                @Html.DropDownList("SupplierID", null, "Chọn nhà cung cấp", new { @class = "custom-select", id = "SupplierID" })
                                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="QuantityPerUnit">Khối lượng</label>
                                @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control", id = "QuantityPerUnit", type = "text", placeholder = "Ví dụ: 1 kg" } })
                                @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="UnitPrice">Giá đơn vị</label>
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", id = "UnitPrice", type = "number", min = "0", step = "0.01" } })
                                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="UnitsInStock">Số lượng tồn kho</label>
                                @Html.EditorFor(model => model.UnitsInStock, new { htmlAttributes = new { @class = "form-control", id = "UnitsInStock", type = "number", min = "0", max = "10000", step = "1" } })
                                @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="UnitsOnOrder">Số lượng đơn hàng</label>
                                @Html.EditorFor(model => model.UnitsOnOrder, new { htmlAttributes = new { @class = "form-control", id = "UnitsOnOrder", type = "number", min = "0", max = "10000", step = "1" } })
                                @Html.ValidationMessageFor(model => model.UnitsOnOrder, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="Discontinued">Tình trạng hàng</label>
                                <div class="custom-control custom-switch">
                                    @Html.CheckBoxFor(model => model.Discontinued, new { @class = "custom-control-input", id = "Discontinued" })
                                    <label class="custom-control-label" for="Discontinued">Ngừng bán</label>
                                </div>
                                @Html.ValidationMessageFor(model => model.Discontinued, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label for="ProductDescription">Mô tả đơn hàng</label>
                                @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control", id = "ProductDescription", rows = "4" })
                                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6 d-flex flex-column align-items-center">
                            <fieldset>
                                <legend class="mb-3">Hình ảnh sản phẩm</legend>
                                <div class="image-preview-container" id="existingImagePreviewContainer">
                                    @if (Model.Images != null && Model.Images.Any())
                                    {
                                        foreach (var image in Model.Images)
                                        {
                                            <div class="image-item">
                                                <img src="@Url.Content("~/Content/Images/" + image.ImageName)" alt="Product Image" class="product-image-preview" onerror="this.src='/Content/Images/fallback.jpg'" />
                                                <button class="delete-btn" type="button" name="ImagesToDelete" value="@image.ImageID">x</button>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <span>Không có hình ảnh</span>
                                    }
                                </div>

                                <div class="image-upload">
                                    <label class="upload-btn" for="ImageFiles">
                                        <i class="fas fa-camera"></i>
                                        <span>Thêm hình ảnh mới</span>
                                    </label>
                                    <input type="file" class="file-input" id="ImageFiles" name="ImageFiles" accept=".jpg,.jpeg,.png" multiple />
                                    <br />
                                    <small class="form-text mt-2">Chọn thêm ảnh (JPG, PNG, tối đa 5MB mỗi ảnh)</small>
                                    @Html.ValidationMessage("ImageFiles", "", new { @class = "text-danger d-block text-center" })
                                </div>

                                <div class="image-preview-container mt-3" id="newImagePreviewContainer"></div>
                            </fieldset>
                        </div>
                    </div>

                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-primary"><i class="fas fa-save mr-2"></i>Lưu</button>
                        @Html.ActionLink("Quay lại danh sách", "Index", null, new { @class = "btn btn-secondary ms-2" })
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            console.log("Edit page loaded, Images count: " + @(Model.Images?.Count ?? 0));
            $("#ImageFiles").on("change", function () {
                console.log("ImageFiles change event triggered");
                const files = this.files;
                const previewContainer = $("#newImagePreviewContainer");
                previewContainer.empty();

                if (files && files.length > 0) {
                    console.log("Number of files selected:", files.length);
                    Array.from(files).forEach((file, index) => {
                        console.log(`Processing file ${index}:`, file.name, file.type, file.size);
                        if (!file.type.match("image/(jpeg|png)")) {
                            console.error("Invalid file type:", file.type);
                            alert("Chỉ chấp nhận .jpg hoặc .png");
                            return;
                        }
                        if (file.size > 5242880) {
                            console.error("File too large:", file.size);
                            alert("Hình ảnh không được vượt quá 5MB");
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            console.log("FileReader onload, data URL length:", e.target.result.length);
                            const imageItem = $("<div>", { class: "image-item" });
                            const img = $("<img>", {
                                src: e.target.result,
                                alt: "Xem trước ảnh",
                                class: "product-image-preview"
                            });
                            const deleteBtn = $("<button>", {
                                class: "delete-btn",
                                type: "button",
                                text: "x"
                            }).on("click", function () {
                                $(this).parent().remove();
                                console.log("Image deleted from preview");
                            });
                            imageItem.append(img).append(deleteBtn);
                            previewContainer.append(imageItem);
                            console.log("Image appended to newImagePreviewContainer");
                        };
                        reader.onerror = function () {
                            console.error("Error reading file:", file.name);
                            alert("Lỗi khi đọc tệp ảnh");
                        };
                        reader.readAsDataURL(file);
                    });
                }
            });

            // Thêm sự kiện xóa cho ảnh hiện có
            $("#existingImagePreviewContainer .delete-btn").on("click", function () {
                const imageId = $(this).val();
                if (imageId) {
                    $(this).parent().remove();
                    console.log("Image with ID " + imageId + " deleted from preview");
                }
            });
        });
    </script>
}