@{
    ViewBag.Title = "Thông tin tài khoản";
    Layout = "~/Views/Shared/LayoutUsers.cshtml";
}

@model BTLWebMVC.Models.Customer

<div class="container-fluid mt-5 pt-5 pb-5">
    <div class="profile-container p-4 bg-white shadow-sm rounded mx-auto" style="max-width: 700px;">
        <!-- Toast container -->
        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
            <div id="toastMessage" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
                <div class="toast-header">
                    <strong class="me-auto" id="toastTitle"></strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body" id="toastText"></div>
            </div>
        </div>

        <div class="d-flex align-items-center justify-content-between mb-4">
            <div class="d-flex align-items-center">
                <img src="~/Content/accountImages/@(Model.Account.ProfileImage ?? "profile.jpg")"
                     id="profileImagePreview"
                     class="rounded-circle"
                     style="width: 60px; height: 60px; object-fit: cover; border: 2px solid #e0e0e0; margin-right: 1cm;"
                     alt="Profile Image">
                <div>
                    <h4 class="mb-0" id="customerNameDisplay">@Model.CustomerName</h4>
                    <small class="text-muted" id="locationDisplay">e.g. @Model.City, @Model.Country</small>
                </div>
            </div>
            <div class="form-group mb-0">
                <label for="profileImageInput" class="btn btn-outline-primary btn-sm custom-file-upload">
                    <i class="fas fa-camera"></i> Tải ảnh mới
                </label>
            </div>
        </div>

        @using (Html.BeginForm("Update", "UserAcount", FormMethod.Post, new { id = "updateForm", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <input type="file" name="profileImage" id="profileImageInput" class="d-none" accept="image/*" onchange="previewImage(event)" />

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Tên</label>
                        @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "vd: Ngô Tấn Phúc" })
                        @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Họ</label>
                        @Html.TextBoxFor(m => m.ContactName, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "vd: Phúc" })
                        @Html.ValidationMessageFor(m => m.ContactName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Email</label>
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "vd: customer@vtnn.com" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Số điện thoại</label>
                        @Html.TextBoxFor(m => m.Phone, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "0909765432", type = "text", maxlength = "10" })
                        @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Vị trí</label>
                        @Html.TextBoxFor(m => m.Address, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "456 Đường Nhớ, Quận 2" })
                        @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Mã bưu điện</label>
                        @Html.TextBoxFor(m => m.PostalCode, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "70001" })
                        @Html.ValidationMessageFor(m => m.PostalCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Thành phố</label>
                        @Html.TextBoxFor(m => m.City, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "TP. Hồ Chí Minh" })
                        @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Quốc gia</label>
                        @Html.TextBoxFor(m => m.Country, new { @class = "form-control form-control-lg border-0 shadow-sm", @placeholder = "Việt Nam" })
                        @Html.ValidationMessageFor(m => m.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-orange btn-sm btn-block mt-4">Lưu thay đổi</button>
        }
    </div>
</div>

@section styles {
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f9fa;
            overflow-x: hidden;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow-y: auto;
        }

        .container-fluid {
            min-height: calc(100vh - 100px);
            padding-top: 30px;
            padding-bottom: 50px;
        }

        .profile-container {
            border-radius: 15px;
            background: #fff;
            padding: 30px;
            margin-top: 30px;
            margin-bottom: 30px;
        }

        .custom-file-upload {
            cursor: pointer;
        }

        .form-control-lg {
            padding: 15px;
            font-size: 16px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
        }

        .form-control:focus {
            box-shadow: none;
            border-color: #007bff;
        }

        .btn-orange {
            background-color: #ff6200;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px;
            font-weight: 500;
            font-size: 14px;
            transition: background-color 0.3s;
        }

            .btn-orange:hover {
                background-color: #e65c00;
            }

        .form-group > label:not(.custom-file-upload) {
            font-weight: 500;
            color: #333;
            margin-bottom: 8px;
        }

        .text-muted {
            color: #6c757d !important;
        }

        /* Toast styles */
        .toast-container {
            position: fixed;
            margin-top: 100px;
            left: 20px;
            z-index: 1055;
        }

        .toast {
            min-width: 250px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .toast-success .toast-header {
            background-color: #28a745;
            color: white;
        }

        .toast-error .toast-header {
            background-color: #dc3545;
            color: white;
        }

        .toast-header {
            font-weight: 500;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .toast-body {
            font-size: 14px;
            padding: 15px;
        }
    </style>
}

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function previewImage(event) {
            const reader = new FileReader();
            reader.onload = function () {
                const output = document.getElementById('profileImagePreview');
                output.src = reader.result;
            };
            if (event.target.files && event.target.files[0]) {
                reader.readAsDataURL(event.target.files[0]);
            }
        }

        // xử l1i elememnt document
        document.addEventListener("DOMContentLoaded", function () {
            // Ngăn nhập ký tự đặc biệt vào tên
            const nameInput = document.querySelector("input[name='CustomerName']");
            nameInput.addEventListener("input", function () {
                const regex = /[^a-zA-ZÀ-ỹà-ỹĂăÂâĐđÊêÔôƠơƯư\s]/g;
                this.value = this.value.replace(regex, '');
            });
            const contactNameInput = document.querySelector("input[name='ContactName']");
            contactNameInput.addEventListener("input", function () {
                const regex = /[^a-zA-ZÀ-ỹà-ỹĂăÂâĐđÊêÔôƠơƯư\s]/g;
                this.value = this.value.replace(regex, '');
            })

            // Sửa lại phoneInput vào cùng khối
            const phoneInput = document.querySelector("input[name='Phone']");
            phoneInput.addEventListener("input", function () {
                this.value = this.value.replace(/\D/g, '').slice(0, 10);
            });
        });

        $(document).ready(function () {
            $('#updateForm').on('submit', function (e) {
                e.preventDefault(); // Ngăn form submit thông thường

                var formData = new FormData(this);

                $.ajax({
                    url: '@Url.Action("Update", "UserAcount")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        var toast = $('#toastMessage');
                        var toastTitle = $('#toastTitle');
                        var toastText = $('#toastText');

                        // Xóa các class trước đó
                        toast.removeClass('toast-success toast-error');
                        toastTitle.text(response.success ? 'Thành công' : 'Lỗi');

                        if (response.success) {
                            toast.addClass('toast-success');
                            toastText.text(response.message);

                            // Cập nhật hiển thị tên và vị trí
                            $('#customerNameDisplay').text($('#CustomerName').val());
                            $('#locationDisplay').text('e.g. ' + $('#City').val() + ', ' + $('#Country').val());
                        } else {
                            toast.addClass('toast-error');
                            toastText.text(response.message);
                        }

                        // Hiển thị toast
                        var bsToast = new bootstrap.Toast(toast);
                        bsToast.show();
                    },
                    error: function (xhr, status, error) {
                        var toast = $('#toastMessage');
                        var toastTitle = $('#toastTitle');
                        var toastText = $('#toastText');

                        toast.removeClass('toast-success toast-error').addClass('toast-error');
                        toastTitle.text('Lỗi');
                        toastText.text('Lỗi khi gửi yêu cầu: ' + error);

                        // Hiển thị toast
                        var bsToast = new bootstrap.Toast(toast);
                        bsToast.show();
                    }
                });
            });
        });
    </script>
}